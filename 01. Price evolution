library("quantmod")
library("astsa")
libraries("readxl")
library("tidyverse")
library("fImport")
libraries("fBasics")
library("rugarch")
library("highfrequency")
library("xts")
library("zoo")
library("chron")

###################################################### ################################
################################## Reading data ################ ###################
###################################################### ################################


z =read.table("CRM.txt",sep=",")

# I look at the data I have available
head(z, 20)
# V1 V2 V3 V4 V5 V6 V7
# 1 01/02/2018 09:30:00 102.8800 103.0000 102.880 102.990 70798
# 2 01/02/2018 09:30:01 102.7900 102.7900 102.640 102.790 3095
# 3 01/02/2018 09:30:02 102.7700 102.7700 102.770 102.770 200
# 4 01/02/2018 09:30:15 102.6477 102.6477 102.620 102.620 300
#5 01/02/2018 09:30:22 102.6300 102.6300 102.630 102.630 100

POPC=cbind(z$V3,z$V6)

dt=paste(z$V1,z$V2,sep=" ")
# [1] "01/02/2018 09:30:00" "01/02/2018 09:30:01" "01/02/2018 09:30:02"
# [4] "01/02/2018 09:30:15" "01/02/2018 09:30:22" "01/02/2018 09:30:31"
# [7] "01/02/2018 09:30:41" "01/02/2018 09:30:42" "01/02/2018 09:30:52"
# [10] "01/02/2018 09:31:00" "01/02/2018 09:31:01" "01/02/2018 09:31:04"

dt=as.POSIXct(dt,tz="","%m/%d/%Y %H:%M:%OS")
# [1] "2018-01-02 09:30:00 CET" "2018-01-02 09:30:01 CET" "2018-01-02 09:30:02 CET"
# [4] "2018-01-02 09:30:15 CET" "2018-01-02 09:30:22 CET" "2018-01-02 09:30:31 CET"
# [7] "2018-01-02 09:30:41 CET" "2018-01-02 09:30:42 CET" "2018-01-02 09:30:52 CET"
# [10] "2018-01-02 09:31:00 CET" "2018-01-02 09:31:01 CET" "2018-01-02 09:31:04 CET"

db=xts(x=POPC,order.by=dt)
# [,1] [,2]
# 2018-01-02 09:30:00 102.8800 102.990
# 2018-01-02 09:30:01 102.7900 102.790
# 2018-01-02 09:30:02 102.7700 102.770
# 2018-01-02 09:30:15 102.6477 102.620
# 2018-01-02 09:30:22 102.6300 102.630

# I eliminate values outside the hours in which trading can be carried out
dbtday = db["T09:30:00/T15:59:59"]


###################################################### ################################
#################### Evolution of prices and yields ####################
###################################################### ################################

################ Price Series Graph - One Second Data ################

# To observe the price series it is necessary to correct and insert the missing data.
# To do this I use a loop where I create a vector of NA for every second
# of a given day

datenow = as.Date("2017-12-31")
secdata = NULL
secprice = NULL
secday = NULL
for(i in 1:1826) {
   # I define the day
   datenow=datenow+1
   # I define range and create vector of zeros
   st=paste(as.character(datenow),"9:30:00",sep=" ")
   ed=paste(as.character(datenow),"15:59:59",sep=" ")
   test=seq(as.POSIXct(st),as.POSIXct(ed),by="sec") # for the day datenow I create a vector of times
   # for every second the bag is open
   # from 9:30:00 to 15:59:59
   testx=xts(matrix(0,23400,1),test) # create a column of 0s for each observation
   # data selection of the day
   testx.NA=xts(matrix(NA,23400,1),test)
   selday=dbtday[as.character(datenow)]
   # log-return calculation
   N=nrow(selday)
   if(N>0) {
     p = c( as.numeric(selday[1,1]),as.numeric(selday[2:N,2]))
     testx.NA[index(selday)]=p
     price = na.locf(testx.NA, xout=test )
     dtx.NA = as.numeric(price)
     secprice=cbind(secprice,dtx.NA)
     secdayprice = vec(secprice)
   }
}

# I observe the correct price series
tsplot(secdayprice)

################### Price Series Chart - 5 minute data #################

# given the "secprice" array, which represents an array where each column
# represents the day, while the observations are present in the rows, i.e
# prices in every second. For 5-minute data, we are interested in the 300th
# observation and its multiples. So to select the data you can safely
# directly select row 300 and its multiples to get the data a
# frequency 5 minutes

matrix.5 = secprice[seq(300, nrow(secprice), by = 300), ]
tsplot(vec(matrix.5))

################# Yield series graph - 5 minute data ###############


# loop on the days of the year - all, then holidays are removed
# total days 365+365+366+365+365
datenow = as.Date("2017-12-31")
secdata = NULL
secprice = NULL
secday = NULL
for(i in 1:1826) {
   # I define the day
   datenow=datenow+1
   # I define range and create vector of zeros
   st=paste(as.character(datenow),"9:30:00",sep=" ")
   ed=paste(as.character(datenow),"15:59:59",sep=" ")
   test=seq(as.POSIXct(st),as.POSIXct(ed),by="sec") # for the day datenow I create a vector of times
   # for every second the bag is open
   # from 9:30:00 to 15:59:59
   testx=xts(matrix(0,23400,1),test) # create a column of 0s for each observation
   # data selection of the day
   testx.NA=xts(matrix(NA,23400,1),test)
   selday=dbtday[as.character(datenow)]
   # log-return calculation
   N=nrow(selday)
   if(N>0) {
     # returns
     r=c( log(as.numeric(selday[1,2]))-log(as.numeric(selday[1,1])), log(as.numeric(selday[2:N,2])) -log(as.numeric(selday[1:(N-1),2])))
     testx[index(selday)]=r
     dtx=as.numeric(testx)
     secdata=cbind(secdata,dtx)
     # save the days in which there are trades here to then build the sequence of dates
     secday=cbind(secday,datenow)
   }
}

# from corrected return data, i.e. having handled missing data, it is possible
# calculate returns for 5 minute data

m=c(300)
N=dim(secdata)[1]
T=dim(secdata)[2]
mm=median(RV)
d=diag(1,N/m,N/m) %x% t(rep(1,m))
r=d %*% secdata
N=dim(r)[1]

# Estimate and graph of 5-minute returns
rend=colSums(r)
tsplot(rend, main = "5 minute returns")
